import primApack : 'PrimitiveA.ecore'::PrimitiveA;
import primBpack : 'PrimitiveB.ecore'::PrimitiveB;
import primCpack : 'PrimitiveC.ecore'::PrimitiveC;

transformation primAtoPrimB(primA:primApack, primB:primBpack) {

	top relation AtoB {
		b: Boolean;
		i: Integer;
		r: Real;
		
		s: String;
		xs: String;
		
		domain primA sA:StringA {stringA=xs.substring(2, 5)};
		domain primB sB:StringB {stringB=xs};
		
		when {
			not Sequence{3.14}->isEmpty() and Sequence{5, 3, 5}->notEmpty() and xs.size() > 10;
		}
	}
}

transformation primBtoPrimC(primB:primBpack, primC:primCpack) {
	
	top relation BtoC {
		b: Boolean;
		i: Integer;
		r: Real;
		s: String;
		
		domain primB sB:StringB {stringB=s};
		domain primC sC:StringC {stringC=s};
	}
}

transformation primAtoPrimC(primA:primApack, primC:primCpack) {
	
	top relation AtoC {
		b: Boolean;
		i: Integer;
		r: Real;
		
		s: String;
		xs: String;
		
		domain primA sA:StringA {stringA=xs.substring(2, 5)};
		domain primC sC:StringC {stringC=xs};
		
		when {
			xs.size() > 10;
		}
	}
}